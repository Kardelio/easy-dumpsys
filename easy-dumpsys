#!/usr/bin/env bash
taskcolor="\033[0;30;107m"
taskcolorDim="\033[2;30;107m"
activitycolor="\033[44;93m"
fragmentcolor="\033[95m"
fragmentStatecolor="\033[93m"
tagcolor="\033[92m"
infocolor="\033[36m"
objectcolor="\033[2m"
packagecolor="\033[36;2m"
reset="\033[0m"

DIR=$(dirname "$0")
versionFile="$DIR/.version"

timestamp=$(date +%s)
dsFileName=".ds_temp_file_$timestamp"
simpleFile=".ds_temp_simple_file_$timestamp"
mapFile=".ds_temp_map_file_$timestamp"
keepFile=false
useSpecificFile=""

argsCount=$#

#TODO:
# Turns out that applications have fragments like this:
# ······#1:·RestaurantListContent{2602624·#1·id=0x7f0a00f1·RestaurantListContent}$
# DEALT with above ^ DONE
#1. Also pull out fragment TAGs from original line...
#    mTag from line below the original
#2. Also pull out fragent mState list below: from 2 lines below original
#    static final int INVALID_STATE = -1;   // Invalid state used as a null value.
#    static final int INITIALIZING = 0;     // Not yet created.
#    static final int CREATED = 1;          // Created.
#    static final int ACTIVITY_CREATED = 2; // The activity has finished its creation.
#    static final int STOPPED = 3;          // Fully created, not started.
#    static final int STARTED = 4;          // Created and started, not resumed.
#    static final int RESUMED = 5;          // Created started and resumed.
#What is state 7?
#state 7 seems to be the fragment ontop and visible
#TODO: add arguement or tag as another display option
# ServerDrivenUIFragment{5639b6} (b27f6918-e5e4-4c02-8eac-51c5fea9cbd6 id=0x7f0b0286 tag=server_driven_ui)
#     mFragmentId=#7f0b0286 mContainerId=#7f0b0286 mTag=server_driven_ui
#     mState=1 mWho=b27f6918-e5e4-4c02-8eac-51c5fea9cbd6 mBackStackNesting=2
#     mAdded=false mRemoving=true mFromLayout=false mInLayout=false
#     mHidden=false mDetached=false mMenuVisible=true mHasMenu=false
#     mRetainInstance=false mUserVisibleHint=true
#     mFragmentManager=FragmentManager{e59e1a3 in ContainerFragment{f549fba}}}
#     mHost=androidx.fragment.app.FragmentActivity$HostCallbacks@45a5246
#     mParentFragment=ContainerFragment{f549fba} (d5be64b9-9618-48af-bfce-252d1f4bc84d id=0x7f0b0141 tag=ContainerFragment: 2131428546)
#     mArguments=Bundle[{initData=ServerDrivenUiData(pageId=landing-pages/locations/16, params={}, container=SERVER_DRIVEN_UI, screenType=SDUI)}]
#     mSavedViewRegistryState=Bundle[{androidx.lifecycle.BundlableSavedStateRegistry.key=Bundle[{SaveableStateRegistry:-1=Bundle[{haruc3=[[-3.4028235E38, 0.0, 0.0]], y0oyop=[[0, 0]], ysatff=[{dynamic-navigation-sticky-header={-3ewv9r=[0]}}]}]}]}]


function selectAndPreparePackage(){
    package=$1
    if [ $argsCount -eq 0 ] && [ -z "$useSpecificFile" ]; then
        fzf_installed=$(which fzf)
        if [[ -z ${fzf_installed} ]]; then
            echo "FZF is NOT installed so you can not use the interactive package picker"
            echo "Install FZF to enable this feature"
            exit 1
        else
            packToUse=$(adb shell pm list package -3 | fzf | cut -d':' -f2)
            echo "Using package: $packToUse"
            package="$packToUse"
            if [[ -z "$package" ]]; then
                echo "No package provided!"
                exit 1
            fi
        fi
    fi

    # The all important adb dumpsys command
    if [[ -z "$useSpecificFile" ]]; then
        adb shell dumpsys activity "$package" > "$dsFileName"
    else
        cat "$useSpecificFile" > "$dsFileName"
    fi

    sed -i '' '/Added\ Fragments\:/,/FragmentManager\ misc\ state\:/d' "$dsFileName"
    sed -i '' '/Child\ FragmentManager/d' "$dsFileName"
}

function cleanUpDSFile(){
    if [[ "$keepFile" = false ]]; then
        rm "$dsFileName"
    fi
}

function getIndentAmount(){
    local indent=$(echo "$1" | sed 's/[a-zA-Z0-9].*//g' | wc -c | sed 's/[[:space:]]//g')
    indent=$((indent - 1))
    echo "$indent"
}

function printElement(){
    local class=$(echo "$1" | cut -d{ -f1)
    local id=$(echo "$1" | awk '{print $NF}' | sed 's/}//g')
    local status=$(echo "$1" | awk '{print $2}')
    #V = visible, I = invisible, G = gone
    local vis=$(echo "${status:0:1}")
    echo "$class - $id - $vis"
}

function viewHierarchy(){
    lineIter=1
    while IFS= read -r line
    do
        currentIndent=$(getIndentAmount "$line")
        nextLine=$(sed -n $((lineIter + 1))p vh-ex.txt)
        nextIndent=$(getIndentAmount "$nextLine")
        if [[ "$nextIndent" -le "$currentIndent" ]]; then
            printElement "$line"
        fi 
        lineIter=$((lineIter + 1))
    done < "$1" #File to read from
}

while getopts khf:v flag
do
    case "${flag}" in
        h) 
            echo "TODO: Print help"
            exit 0
        ;;
        v)
            shift 1
            selectAndPreparePackage "$1"
            sed -i '' '1,/^[[:space:]]*View\ H/d;/^[[:space:]]*Looper/,$d' "$dsFileName"
            viewHierarchy "$dsFileName"
            cleanUpDSFile
            #echo "Easy-Dumpsys Version: $(cat "$versionFile")"
            exit 0
        ;;
        k) 
            echo "Keeping the file: $dsFileName"
            printf "${infocolor}Keeping the file: ${dsFileName}${reset}\n"
            keepFile=true
            shift 1
        ;;
        f) 
            useSpecificFile="${OPTARG}"
            printf "${infocolor}Using a specific file instead: ${useSpecificFile}${reset}\n"
            shift 2
        ;;
    esac
done

selectAndPreparePackage "$1"

#-------------------------
#------ Code Start -------
#-------------------------
lineIterator=0
while IFS= read -r line
do
#TODO Tasks
#TASK 10273:com.babbel.mobile.android.en id=154 userId=0
    lineIterator=$((lineIterator + 1))
    #elif [[ "$line" =~ [[:space:]]{2,}[a-zA-Z1-9]+\{[a-z0-9]+\}\ \( ]]; then
    #delete all lines Added Fragments:
    # and FragmentManager misc state: 
    #sed '/Added\ Fragments\:/,/FragmentManager\ misc/d'
    #find spaces and 
    #\ [a-zA-Z0-9]*\{[0-9a-z\}]*\ .*-.*-.*-.*-
    #elif [[ "$line" =~ \ [a-zA-Z1-9]+\{[a-z0-9\}]+\ .*id\= ]]; then
    if [[ "$line" =~ "TASK".*  ]]; then
        #16-03-2021 - Adding task seems to work fine doesnt break anything
        echo "$line" >> "$simpleFile"
    elif [[ "$line" =~ "  ACTIVITY".* ]]; then
        echo "$line" >> "$simpleFile"
        statusLine=$(sed -n "$((lineIterator + 2))p" "$dsFileName")
        echo "### $statusLine" >> "$simpleFile"
    elif [[ "$line" =~ \ [a-zA-Z1-9]+\{[a-z0-9\}]+\  ]]; then
        #TODO fragmetns not picked up here
        echo "$line" >> "$simpleFile"
        statusLine=$(sed -n "$((lineIterator + 2))p" "$dsFileName")
        argsLine=$(sed -n "$((lineIterator + 9))p" "$dsFileName")
        #echo "->>>$argsLine"
        #check starts with mArguments=
        echo "### $statusLine" >> "$simpleFile"
        echo "### $argsLine" >> "$simpleFile"
    fi
done < "$dsFileName"

#TASK 10273:com.babbel.mobile.android.en id=154 userId=0
#  ACTIVITY com.babbel.mobile.android.en/com.babbel.mobile.android.core.presentation.mainactivity.screens.MainActivity b335371 pid=19503
####       mResumed=false mStopped=true mFinished=false
#        #0: ReportFragment{a95b7f6 #0 androidx.lifecycle.LifecycleDispatcher.report_fragment_tag}
#      mCreated=true mResumed=false mStopped=true    Active Fragments:    OnboardingScreen{f912a8} (16cc3757-abaf-4e41-b243-e366c7302bed) id=0x7f0a0199 com.babbel.mobile.android.core.presentation.onboarding.screens.OnboardingScreen}
#          Active Fragments:          OnboardingPageScreen{cd9b8a7} (ff4989e6-aaf6-4360-91cc-6acefc360b5f) id=0x7f0a0587}
#          OnboardingPageScreen{a1959f2} (82ed986a-86e3-4880-9c03-a559d645ca8e) id=0x7f0a0587}
#    SplashScreen{d5f233e} (215e56df-c30f-4597-878f-5d2d7bb5d2f7) id=0x7f0a0199 com.babbel.mobile.android.core.presentation.splashscreen.screens.SplashScreen}
#    SupportRequestManagerFragment{e6f9ab5} (d7773d64-f823-4cc6-a560-f28e8fa8098b) com.bumptech.glide.manager}{parent=null}
#TASK 10273:com.babbel.mobile.android.en id=154 userId=0
#  ACTIVITY com.babbel.mobile.android.en/com.babbel.mobile.android.core.presentation.devconfig.view.DevConfigActivity 513f114 pid=19503
####       mResumed=true mStopped=false mFinished=false
#        #0: ReportFragment{63a64dc #0 androidx.lifecycle.LifecycleDispatcher.report_fragment_tag}
#      mCreated=true mResumed=true mStopped=false    Active Fragments:    OverrideFragment{78233f7} (65ce9eee-8930-4681-9b32-5ba0abb9b89a) f0}


declare -A activityMap
levelOneConstant=10
levelIterator=6
activityCounter=0
simpleLineIterator=0
while IFS= read -r line
do
    level=0
    simpleLineIterator=$((simpleLineIterator + 1))
    if [[ "$line" =~ "TASK".* ]]; then
        taskName=$(echo "$line" | awk '{print $2}' | cut -d':' -f2)
        if [[ "$taskName" == "null" ]]; then
            taskFirstActivity=$(sed -n "$((simpleLineIterator + 1))p" "$simpleFile")
            taskName=$(echo "$taskFirstActivity" | awk '{print $2}' | cut -d'/' -f1)
        fi
        echo "T $taskName - - -" >> "$mapFile"
    elif [[ "$line" =~ "  ACTIVITY".* ]]; then
        activityCounter=$((activityCounter+1))
        activityDisplayLine=$(printf "$line" | sed -e 's/^[[:space:]]*//' | cut -d' ' -f2 | cut -d'/' -f2)
        pidLine=$(printf "$line" | sed -e 's/^[[:space:]]*//' | cut -d' ' -f4 | cut -d'=' -f2)
        objectref=$(printf "$line" | sed -e 's/^[[:space:]]*//' | cut -d' ' -f3)
        activityStateLine=$(sed -n "$((simpleLineIterator + 1))p" "$simpleFile")
        SAVEIFS=$IFS
        IFS=' ' read -r -a array <<< "$activityStateLine"
        IFS=$SAVEIFS
        resumedPreManip=$(printf "${array[1]}" | cut -d'=' -f2)
        ext="-"
        if [[ "$resumedPreManip" == true ]]; then
            ext="Active" 
        fi
        echo "A $activityDisplayLine{$objectref}[$pidLine] $ext - -" >> "$mapFile"
        activityMap["$activityCounter"]="$simpleLineIterator"
    #elif [[ "$line" =~ [[:space:]]{2,}[a-zA-Z1-9]+\{[a-z0-9]+\}\ \( ]]; then
    #elif [[ "$line" =~ \ [a-zA-Z1-9]+\{[a-z0-9\}]+\ .*id\= ]]; then
    elif [[ "$line" =~ \ [a-zA-Z1-9]+\{[a-z0-9\}]+\  ]]; then
        # FRAGMENT BIT
        # FRAGMENT BIT
        numberOfSpace=$(printf "$line" | awk -F'[^ ]' '{print length($1),NR}' | awk '{print $1}')
        #if [[ ! "$numberOfSpace" == 4 ]] && [[ ! "$numberOfSpace" == 6 ]]; then
        if [[ ! "$numberOfSpace" == 4 ]] && [[ ! "$numberOfSpace" == 6 ]] && [[ ! "$numberOfSpace" == 8 ]]; then
            levelA=$((numberOfSpace - levelOneConstant))
            levelB=$((levelA / levelIterator))
            level=$((levelB + 1))
        fi
        wholeFragment=$(printf "$line" | perl -nle 'm/([a-zA-Z0-9]*{[a-z0-9}]*)/; print $1')
        fragmentTag=$(printf "$line" | perl -nle 'm/(tag=([a-zA-Z0-9-_.]+))/; print $2')
        if [[ -z "$fragmentTag" ]]; then
            fragmentTag="-"
        fi
        externalPackager=$(printf "$line" | perl -nle 'm/([a-z0-9A-Z_]*(\.[A-Za-z0-9_]+)+[A-Z0-9a-z_]*)/; print $1')
        fragmentStatusLine=$(sed -n "$((simpleLineIterator + 1))p" "$simpleFile")
        fragmentArgLine=$(sed -n "$((simpleLineIterator + 2))p" "$simpleFile")
        stateNum=$(echo "$fragmentStatusLine" | awk '{print $2}' | cut -d'=' -f2)
        argInfo=$(echo "$fragmentArgLine" | awk -F '[' '{print $2}' | gsed -n 's/.*pageId=\([^,]*\),.*/\1/p')
        argaddition="-"
        if ! [[ -z "$argInfo" ]]; then
            argaddition="$argInfo"
        fi
        if [[ -z "$externalPackager" ]]; then
            echo "F $wholeFragment $level - ${fragmentTag} ${stateNum} ${argaddition}" >> "$mapFile"
        else
            echo "F $wholeFragment $level $externalPackager ${fragmentTag} ${stateNum} ${argaddition}" >> "$mapFile"
        fi
    else
        echo "- - - - -" >> "$mapFile"
    fi
done < "$simpleFile"

declare -A barMap
totalLineCount=$(cat "$simpleFile" | wc -l | sed 's/[[:space:]]//g')
finalLineIterator=0
currentActivtyNum=0
while IFS= read -r line
do
    finalLineIterator=$((finalLineIterator + 1))
    part1=$(echo "$line" | awk '{print $1}')
    part2=$(echo "$line" | awk '{print $2}')
    part3=$(echo "$line" | awk '{print $3}')
    part4=$(echo "$line" | awk '{print $4}')
    part5=$(echo "$line" | awk '{print $5}')
    part6=$(echo "$line" | awk '{print $6}')
    part7=$(echo "$line" | awk '{print $7}')
    if [[ "$part1" == "T" ]]; then
        echo ""
        #printf "TASK: ${taskcolor}---> $part2 <---${reset}\n"
        printf "${taskcolorDim}--->${taskcolor} $part2 ${taskcolorDim}<---${reset}\n"
    elif [[ "$part1" == "A" ]]; then
        unset barMap
        currentActivtyNum=$((currentActivtyNum+1))
        justClass=$(printf "$part2" | cut -d'{' -f1)
        obj=$(printf "$part2" | cut -d'{' -f2 | cut -d'}' -f1)
        objStr=" - ${objectcolor}${obj}${reset}"
        pid=$(printf "$part2" | cut -d'[' -f2 | cut -d']' -f1)
        pidStatus=" \033[93;2mpid:${pid}\033[0m"
        activeStatus=""
        if [[ "$part3" == "Active" ]]; then
            activeStatus=" \033[93mActive\033[0m"
        fi
        echo ""
        printf "${activitycolor}$justClass${reset}${objStr}${pidStatus}${activeStatus}\n"
    elif [[ "$part1" == "F" ]]; then
        nextActLineNum=$((currentActivtyNum+1))
        nextActLine="${activityMap[$nextActLineNum]}"
        if [[ -z "$nextActLine" ]]; then
            nextActLine="$totalLineCount"
        else 
            #make it none inclusive
            nextActLine=$((nextActLine-1))
        fi
        linesLeftTillA=""
        finalLineIteratorAddOne=$((finalLineIterator + 1))
        if [[ "$finalLineIteratorAddOne" -le "$nextActLine" ]]; then
            linesLeftTillA=$(sed -n "${finalLineIteratorAddOne},${nextActLine}p" "$mapFile")
        fi

        if [[ ! -z "$linesLeftTillA" ]]; then
            while IFS= read -r inner
            do
                outter=$(echo "$inner" | awk '{print $3}')
                if [[ "$outter" == "$part3" ]]; then
                    #Still another at this level
                    barMap["$part3"]="y"
                    break
                else
                    barMap["$part3"]=""
                fi
            done < <(printf '%s\n' "$linesLeftTillA")
        else
            barMap["$part3"]=""
        fi
        
        for ((n=0;n<=$part3;n++))
        do
            if [[ "${barMap["$n"]}" == "y" ]]; then
                if [[ "$part3" == "$n" ]]; then
                    printf "├─ "
                else 
                    printf "│  "
                fi
            else
                if [[ "$part3" == "$n" ]]; then
                    printf "└─ "
                else 
                    printf "   "
                fi
            fi
        done
        #might not have closing bracket
        fr=$(printf "$part2" | cut -d'{' -f1)
        oc=$(printf "$part2" | cut -d'{' -f2 | sed 's/\}//g')
        
        tagForFrag=" "
        if [[ "$part5" != "-" ]]; then
            tagForFrag=" ${tagcolor}(${part5})${reset} "
        fi
        stateIcon="▶"
        case "$part6" in
            "1") #created
                stateIcon=""
                ;;
            "2") #activity_created
                stateIcon=""
                ;;
            "3") #Stopped
                stateIcon=""
                ;;
            "4") #started
                stateIcon=""
                ;;
            "5") #resumed
                stateIcon=""
                ;;
            "7") #resumed and on screen to user
                stateIcon="▶ "
                ;;
            *)
                #stateIcon="●"
                stateIcon=""
#    static final int INVALID_STATE = -1;   // Invalid state used as a null value.
#    static final int INITIALIZING = 0;     // Not yet created.
#    static final int CREATED = 1;          // Created.
#    static final int ACTIVITY_CREATED = 2; // The activity has finished its creation.
#    static final int STOPPED = 3;          // Fully created, not started.
#    static final int STARTED = 4;          // Created and started, not resumed.
#    static final int RESUMED = 5;          // Created started and resumed.
                ;;
        esac
        displayArgs=""
        if ! [[ -z "$part7" ]]; then
            #Very bespoke to GYG
            displayArgs=" ${part7} "
        fi
        #oc=$(printf "$part2" | cut -d'{' -f2 | cut -d'}' -f1)
        if [[ "$part4" != "-" ]]; then
            #printf "${fragmentStatecolor}${stateIcon}${reset}${fragmentcolor}${fr}${reset}${tagForFrag}- ${objectcolor}${oc} ${packagecolor}(${part4})${reset}\n"
            printf "${fragmentStatecolor}${stateIcon}${reset}${fragmentcolor}${fr}${reset} - ${objectcolor}${oc} ${packagecolor}(${part4})${reset}${displayArgs}\n"
        else
            #printf "${fragmentStatecolor}${stateIcon}${reset}${fragmentcolor}${fr}${reset}${tagForFrag}- ${objectcolor}${oc}${reset}\n"
            printf "${fragmentStatecolor}${stateIcon}${reset}${fragmentcolor}${fr}${reset} - ${objectcolor}${oc}${reset}${displayArgs}\n"
        fi
    fi
done < "$mapFile"

printf "\n" 
cleanUpDSFile
rm "$simpleFile"
rm "$mapFile"
#Note: Simple file made first , that then goes into making MAP
